/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   0.01;

HAR 1;

vertices
(
    (0 0 0)     // 0
    (1 0 0)     // 1
    (1 -1.6 0)  // 2
    (4 -1.6 0)  // 3
    (4 0 0)     // 4
    (6 0 0)     // 5
    (6 -1.6 0)  // 6
    (9 -1.6 0)  // 7
    (9 0 0)     // 8
    (10 0 0)    // 9
    (10 2 0)    // 10
    (9 2 0)     // 11
    (6 2 0)     // 12
    (4 2 0)     // 13
    (1 2 0)     // 14
    (0 2 0)     // 15

    (0 0 $HAR)     // 16
    (1 0 $HAR)     // 17
    (1 -1.6 $HAR)  // 18
    (4 -1.6 $HAR)  // 19
    (4 0 $HAR)     // 20
    (6 0 $HAR)     // 21
    (6 -1.6 $HAR)  // 22
    (9 -1.6 $HAR)  // 23
    (9 0 $HAR)     // 24
    (10 0 $HAR)    // 25
    (10 2 $HAR)    // 26
    (9 2 $HAR)     // 27
    (6 2 $HAR)     // 28
    (4 2 $HAR)     // 29
    (1 2 $HAR)     // 30
    (0 2 $HAR)     // 31
);

blocks
(
    hex (0 1 14 15 16 17 30 31) (10 20 1) edgeGrading (.1 1 1 .1
                                                       ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1))
                                                      1 1 1 1 )     // 1
    hex (1 4 13 14 17 20 29 30) (30 20 1) edgeGrading (((.5 .5 10)(.5 .5 .1)) 1 1 ((.5 .5 10)(.5 .5 .1))
                                                       ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1))
                                                       1 1 1 1)     // 2
    hex (2 3 4  1  18 19 20 17) (30 16 1) edgeGrading (1 ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) 1  
                                                        .1 .1 .1 .1   
                                                        1 1 1 1)     // 3
    hex (4 5 12 13 20 21 28 29) (20 20 1) edgeGrading (((.5 .5 10)(.5 .5 .1)) 1 1 ((.5 .5 10)(.5 .5 .1))  
                                                        ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1))
                                                        1 1 1 1)     // 4
    hex (5 8 11 12 21 24 27 28) (30 20 1) edgeGrading (((.5 .5 10)(.5 .5 .1)) 1 1 ((.5 .5 10)(.5 .5 .1))
                                                        ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1))
                                                        1 1 1 1)     // 5
    hex (6 7 8  5  22 23 24 21) (30 16 1) edgeGrading (1 ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) 1   
                                                        .1 .1 .1 .1   
                                                        1 1 1 1)     // 6
    hex (8 9 10 11 24 25 26 27) (10 20 1) edgeGrading (10 1 1 10 
                                                        ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1)) ((.5 .5 10)(.5 .5 .1))
                                                        1 1 1 1)     // 7


);

edges
(
);

boundary
(
    inlet
    {
        type              cyclic;
        neighbourPatch    outlet;
        faces
        (
            (0 16 31 15)
        );
    }
    outlet
    {
        type              cyclic;
        neighbourPatch    inlet;
        faces
        (
            (9 10 26 25)
        );
    }
    Walls
    {
        type wall;
        faces
        (
            (0 1 17 16)
            (1 2 18 17)
            (2 3 19 18)
            (3 4 20 19)
            (4 5 21 20)
            (5 6 22 21)
            (6 7 23 22)
            (7 8 24 23)
            (8 9 25 24)
            (10 11 27 26)
            (11 12 28 27)
            (12 13 29 28)
            (13 14 30 29)
            (14 15 31 30) 
        );
    }
    back
    {
        type empty;
        faces
        (
            (0 15 14 1)
            (4 1 14 13)
            (5 4 13 12)
            (8 5 12 11)
            (9 8 11 10)
            (3 2 1 4)
            (7 6 5 8)
        );
    }
    front
    {
        type empty;
        faces
        (
            (16 17 30 31)
            (17 20 29 30)
            (20 21 28 29)
            (21 24 27 28)
            (24 25 26 27)
            (17 18 19 20)
            (21 22 23 24)
        );
    }
);


// ************************************************************************* //
